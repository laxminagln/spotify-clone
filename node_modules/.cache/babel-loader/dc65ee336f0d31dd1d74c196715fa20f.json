{"ast":null,"code":"var _jsxFileName = \"/home/nagln/Documents/GitHub/spotify-clone/src/App.js\";\nimport React, { useEffect, useState } from 'react';\nimport Login from './Login';\nimport { getTokenFromUrl } from './spotify';\nimport SpotifyWebApi from 'spotify-web-api-js';\nimport Player from './Player';\nimport { useDataLayerValue } from './DataLayer';\nimport './App.css';\nconst spotify = new SpotifyWebApi();\n\nfunction App() {\n  const [{\n    user,\n    token\n  }, dispatch] = useDataLayerValue();\n  useEffect(() => {\n    const hash = getTokenFromUrl();\n    window.location.hash = \"\";\n    const token = hash.access_token;\n\n    if (token) {\n      dispatch({\n        type: 'SET_TOKEN',\n        token: token\n      });\n      spotify.setAccessToken(token);\n      spotify.getMe().then(user => {\n        dispatch({\n          type: 'SET_USER',\n          user: user\n        });\n      });\n      spotify.getUserPlaylists().then(playlists => {\n        dispatch({\n          type: \"SET_PLAYLISTS\",\n          playlists: playlists\n        });\n      });\n    }\n  }, []);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"app\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 5\n    }\n  }, token ? /*#__PURE__*/React.createElement(Player, {\n    spotify: spotify,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }\n  }) : /*#__PURE__*/React.createElement(Login, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 9\n    }\n  }));\n}\n\nexport default App;","map":{"version":3,"sources":["/home/nagln/Documents/GitHub/spotify-clone/src/App.js"],"names":["React","useEffect","useState","Login","getTokenFromUrl","SpotifyWebApi","Player","useDataLayerValue","spotify","App","user","token","dispatch","hash","window","location","access_token","type","setAccessToken","getMe","then","getUserPlaylists","playlists"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;AACA,OAAOC,KAAP,MAAkB,SAAlB;AACA,SAASC,eAAT,QAAgC,WAAhC;AACA,OAAOC,aAAP,MAA0B,oBAA1B;AACA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAASC,iBAAT,QAAkC,aAAlC;AACA,OAAO,WAAP;AAEA,MAAMC,OAAO,GAAG,IAAIH,aAAJ,EAAhB;;AAEA,SAASI,GAAT,GAAe;AACb,QAAM,CAAC;AAACC,IAAAA,IAAD;AAAOC,IAAAA;AAAP,GAAD,EAAgBC,QAAhB,IAA4BL,iBAAiB,EAAnD;AAEAN,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMY,IAAI,GAAGT,eAAe,EAA5B;AACAU,IAAAA,MAAM,CAACC,QAAP,CAAgBF,IAAhB,GAAuB,EAAvB;AACA,UAAMF,KAAK,GAAGE,IAAI,CAACG,YAAnB;;AACA,QAAGL,KAAH,EAAU;AACRC,MAAAA,QAAQ,CAAC;AACPK,QAAAA,IAAI,EAAE,WADC;AAEPN,QAAAA,KAAK,EAAEA;AAFA,OAAD,CAAR;AAIAH,MAAAA,OAAO,CAACU,cAAR,CAAuBP,KAAvB;AACAH,MAAAA,OAAO,CAACW,KAAR,GAAgBC,IAAhB,CAAqBV,IAAI,IAAI;AAC3BE,QAAAA,QAAQ,CAAC;AACPK,UAAAA,IAAI,EAAE,UADC;AAEPP,UAAAA,IAAI,EAAEA;AAFC,SAAD,CAAR;AAID,OALD;AAMAF,MAAAA,OAAO,CAACa,gBAAR,GAA2BD,IAA3B,CAAiCE,SAAD,IAAe;AAC7CV,QAAAA,QAAQ,CAAC;AACPK,UAAAA,IAAI,EAAE,eADC;AAEPK,UAAAA,SAAS,EAAEA;AAFJ,SAAD,CAAR;AAID,OALD;AAMD;AACF,GAvBQ,EAuBN,EAvBM,CAAT;AAwBA,sBACE;AAAK,IAAA,SAAS,EAAC,KAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEEX,KAAK,gBACH,oBAAC,MAAD;AAAQ,IAAA,OAAO,EAAEH,OAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADG,gBAGH,oBAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALJ,CADF;AAWD;;AAED,eAAeC,GAAf","sourcesContent":["import React, { useEffect, useState } from 'react';\nimport Login from './Login';\nimport { getTokenFromUrl } from './spotify';\nimport SpotifyWebApi from 'spotify-web-api-js';\nimport Player from './Player';\nimport { useDataLayerValue } from './DataLayer';\nimport './App.css';\n\nconst spotify = new SpotifyWebApi();\n\nfunction App() {\n  const [{user, token}, dispatch] = useDataLayerValue();\n\n  useEffect(() => {\n    const hash = getTokenFromUrl();\n    window.location.hash = \"\";\n    const token = hash.access_token;\n    if(token) {\n      dispatch({\n        type: 'SET_TOKEN',\n        token: token,\n      })\n      spotify.setAccessToken(token);\n      spotify.getMe().then(user => {\n        dispatch({\n          type: 'SET_USER',\n          user: user,\n        })\n      });\n      spotify.getUserPlaylists().then((playlists) => {\n        dispatch({\n          type: \"SET_PLAYLISTS\",\n          playlists: playlists,\n        })\n      });\n    }\n  }, []);\n  return (\n    <div className=\"app\">\n    {\n      token ? (\n        <Player spotify={spotify}/>\n      ) : (\n        <Login />\n      )\n    }\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}